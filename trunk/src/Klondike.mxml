<?xml version="1.0" encoding="utf-8"?>
<!--
 *
 * Copyright (c) 2007 Darron Schall
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to do
 * so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
	layout="absolute"
	frameRate="60">

	<mx:Script>
		<![CDATA[
			import klondike.KlondikeGame;
			
			protected var game:KlondikeGame;
		
			/**
			 * Load the ActionScript game into this Flex container application.
			 */
			protected function attachGame():void
			{
				game = new KlondikeGame();
				
				gameHolder.addChild( game );
				
				invalidateDisplayList();
			}
			
			/**
			 * Because the game is actually an ActionScript sprite, we
			 * need to manually update it's size whenever the game holder
			 * container changes size.
			 */
			override protected function updateDisplayList( unscaledWidth:Number, unscaledHeight:Number ):void
			{
				super.updateDisplayList( unscaledWidth, unscaledHeight );
				
				// Bail out if the game hasn't been created yet
				if ( !game ) return;
				
				// Maintain aspect ratio by determine the smaller of the two 
				// scales, and use that for both
				game.scaleX = game.scaleY = 1;  // Reset scale so calculation is correct
				var scaleX:Number = unscaledWidth / game.width;
				var scaleY:Number = unscaledHeight / game.height;
				
				game.scaleX = game.scaleY = Math.min( scaleX, scaleY );
			}
			
		]]>
	</mx:Script>
	
	<mx:UIComponent id="gameHolder" width="100%" height="100%"
		creationComplete="attachGame()" />
	
</mx:Application>
